{"version":3,"sources":["Refresh.png","components/QuoteGenerator/QuoteGenerator.js","components/Footer/Footer.js","routes/AuthorPage.js","routes/MainPage.js","components/App.js","reportWebVitals.js","index.js"],"names":["QuoteGenerator","fetchData","className","onClick","src","refresh","alt","Footer","AuthorPage","getAllAuthorQuotes","quotes","author","useParams","useEffect","fetch","then","response","json","content","catch","err","console","log","to","style","marginLeft","map","quote","quoteText","_id","Math","random","MainPage","text","genre","id","App","useState","data","setData","newQuote","quoteAuthor","quoteGenre","basename","process","path","newQuotes","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6cbb25a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Refresh.b0ed30c4.png\";","import './QuoteGenerator.scss';\r\nimport refresh from '../../Refresh.png';\r\nconst QuoteGenerator = ({ fetchData }) => {\r\n  return (\r\n    <button className='random__button' onClick={fetchData}>\r\n      random\r\n      <img className='random__image' src={refresh} alt='huj' />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default QuoteGenerator;\r\n","import './Footer.scss';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className='footer'>\r\n      <p className='footer__txt'>Kamil Budzik @ DevChallenges.io</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { useEffect } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\n\r\nimport './Page.scss';\r\n\r\nconst AuthorPage = ({ getAllAuthorQuotes, quotes, fetchData }) => {\r\n  const { author } = useParams();\r\n\r\n  useEffect(() => {\r\n    fetch(`https://quote-garden.herokuapp.com/api/v3/quotes?author=${author}`)\r\n      .then(response => response.json())\r\n      .then(content => {\r\n        getAllAuthorQuotes(content);\r\n      })\r\n      .catch(err => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <div className='authorPage'>\r\n      <Link onClick={fetchData} className='back-button' to='/'>\r\n        ‚Üê Back\r\n      </Link>\r\n      <h1 className='quote__name' style={{ marginLeft: 10 }}>\r\n        {author}\r\n      </h1>\r\n      <ul>\r\n        {quotes.map(quote => (\r\n          <div key={quote._id || Math.random()} className='quote'>\r\n            <div className='quote__text'>\r\n              <p>{quote.quoteText}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthorPage;\r\n","import { Link } from 'react-router-dom';\r\n\r\nimport './Page.scss';\r\n\r\nconst MainPage = ({ quotes }) => {\r\n  return quotes.map(quote => (\r\n    <div className='quote' key={quote.id}>\r\n      <div className='quote__text'>\r\n        <p>\"{quote.text}\"</p>\r\n      </div>\r\n      <Link className='quote__link' to={`/author/${quote.author}`}>\r\n        <div className='quote__author'>\r\n          <p className='quote__name'>{quote.author}</p>\r\n          <p className='quote__genre'>{quote.genre}</p>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default MainPage;\r\n","import { useState, useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nimport QuoteGenerator from './QuoteGenerator/QuoteGenerator';\nimport Footer from './Footer/Footer';\nimport AuthorPage from '../routes/AuthorPage';\nimport MainPage from '../routes/MainPage';\n\nimport './App.scss';\nimport './reset.scss';\n\nfunction App() {\n  const [data, setData] = useState([\n    {\n      id: '',\n      text: '',\n      author: '',\n      genre: '',\n    },\n  ]);\n\n  const fetchData = () => {\n    fetch('https://quote-garden.herokuapp.com/api/v3/quotes/random')\n      .then(response => response.json())\n      .then(content => {\n        const newQuote = content.data[0];\n        setData([\n          {\n            id: newQuote._id,\n            text: newQuote.quoteText,\n            author: newQuote.quoteAuthor,\n            genre: newQuote.quoteGenre,\n          },\n        ]);\n      })\n      .catch(err => console.log(err));\n  };\n\n  //ComponentDidMount\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const getAllAuthorQuotes = content => {\n    const newQuotes = content.data;\n    setData(newQuotes);\n  };\n  return (\n    <>\n      <main className='container'>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route path='/author/:author'>\n              <AuthorPage\n                getAllAuthorQuotes={getAllAuthorQuotes}\n                quotes={data}\n                fetchData={fetchData}\n              />\n            </Route>\n            <Route path='/'>\n              <QuoteGenerator fetchData={fetchData} />\n              <MainPage quotes={data} />\n            </Route>\n            <Redirect from='*' to='/' />\n          </Switch>\n        </Router>\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}